language: cpp

compiler:
  - gcc

# Prebuild S3 keys
env:
  global:
    # AWS_ACCESS_KEY_ID
    - secure: "Du5tfPwHEyVI5+x+lgKXULbTALBNWUvJRnKQNHkYSVmNsUjxZO38qJWeNn+OhDdYJuYL7raequ6Z5VEc9SHtvNjghwEVejyDDE2A3Mmlqzh/RRlngku75UVYJlB2ROYtc/9elq7oM9YQly5UvcpbGdJAxcqUu4NixW5vDeIL980KKklLAsgfTaP2lSVFNzpaF7CLubBXW3kUoLgfyvq8M+rKemYw1+Bjq5cVOuFjeOpr7eVNRt6Mg3fpkQB9Sj38zfkd5+nqF/0n99hLdip5+vtt8jXhaA4andpz4exANBpDqgR3s4nu4QT7F04GrOUqAazO361vF6pN3jjI+dDZQtGLdGzd4H9jP/gDxwSF1yeWCN5xmUIk6AVL/G/T+lReFiwJNLbxdgxapfwX42J72sO/7vMkbZz3bKoyToXTHISnln6imy5mQ/KemPG3V5uur2JA4b51t5+sLQHGQMmJx9HgDgCmYKzORSsa9SsxTekQQKJ3RCdvJlOtXs0Y+jBd5VckVhpeYSii2WTmAtZEYWsp3m+SH6NyDFQKn61dz/b82W1w8Z85hNl3pM87hMr5je5wM957QFn2H8McIz7sO+oYty3E2d1rNPegbwNPOopTVqix+I6a17/mzmKOTp/b9z2efx4HSA1ZKY7ymv1WwLaomZO0HSlWSrl3MHe1gtI="
    # AWS_SECRET_ACCESS_KEY
    - secure: "fyFvhbviaLkncZMKabZIiZy6FHXUG2w9HRuTQKC6fMs+J1WlHb2L4vGE1Dtt3eiou7tZ3GsBZJzT/tVzQzzycJRv6gVKyKUUFi7QlIQ6736g97oRQiGPH6TDIUwvNcbAoCfwFUzGad6XECk1xlVMeU8TM1vLKlJz0vMv/R2fP9m/3B4AmMaYM2HgWW+RwC1z1NFQkoVzRQlCzSqEZkDsnGSC2DYJKLm9DsyqMpomzAhPhIGQRIWjhjAGCzmEze+0Xu1mGSaMmA3cNQY3RkJ1LYFXT/42qdBOapYNkGH31Vzc5S7dpMSNaYTG0aJ9Sd7Io3toP58GMZMrRau1F+UzSeR18hwXF3y+L1U8cUe9F1amZ57amqP2u3JrfoX7QbqSfVkWOBj/VtebLa0mZC9q0GdUXDip8fN4d6QXFl9ZbLM/DIMAlu1h0pHuRQ48xghYmjhm1bEp9QSTNqQ/+q+mr5dbbRvRC37brOuXeyE4sNcajTdYSP/WjQmtVIJx+9lS+HyNRyeXHWAgfwTJJo+pY8TfxvU4/dxhkpyTlZ6IM7+lcbaGGz1UlhCqjB3x4aiglTkafXwI/HSEtXKpe0IHfjFw1rnJ24lAyYiYKOgIDumDtOsjZaDJbTqWg0dqHReCrhy3P35Y1s081+pj/Vr3fzIAi2INxai0KCvGTwHrdag="

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    packages:
    - g++-6
    - libc6-dev # for libiconv which is needed by libgdal

matrix:
  include:
    # OSX
    - os: osx
      env: NODE_NVM_VERSION="16" TARGET=STATIC
    - os: osx
      env: NODE_NVM_VERSION="16" TARGET=SHARED
    - os: osx
      env: NODE_NVM_VERSION="16" TARGET=TRUNK
    - os: osx
      env: NODE_NVM_VERSION="15" TARGET=STATIC
    - os: osx
      env: NODE_NVM_VERSION="15" TARGET=SHARED
    - os: osx
      env: NODE_NVM_VERSION="15" TARGET=TRUNK
    - os: osx
      env: NODE_NVM_VERSION="14" TARGET=STATIC
    - os: osx
      env: NODE_NVM_VERSION="14" TARGET=SHARED
    - os: osx
      env: NODE_NVM_VERSION="14" TARGET=TRUNK
    - os: osx
      env: NODE_NVM_VERSION="13" TARGET=STATIC
    - os: osx
      env: NODE_NVM_VERSION="13" TARGET=SHARED
    - os: osx
      env: NODE_NVM_VERSION="13" TARGET=TRUNK
    - os: osx
      env: NODE_NVM_VERSION="12" TARGET=STATIC
    - os: osx
      env: NODE_NVM_VERSION="12" TARGET=SHARED
    - os: osx
      env: NODE_NVM_VERSION="12" TARGET=TRUNK
    - os: osx
      env: NODE_NVM_VERSION="11" TARGET=STATIC
    - os: osx
      env: NODE_NVM_VERSION="11" TARGET=SHARED
    - os: osx
      env: NODE_NVM_VERSION="11" TARGET=TRUNK
    - os: osx
      env: NODE_NVM_VERSION="10" TARGET=STATIC
    - os: osx
      env: NODE_NVM_VERSION="10" TARGET=SHARED
    - os: osx
      env: NODE_NVM_VERSION="10" TARGET=TRUNK

    # Linux
    - os: linux
      env: NODE_NVM_VERSION="16" TARGET=STATIC
    - os: linux
      env: NODE_NVM_VERSION="16" TARGET=SHARED
    - os: linux
      env: NODE_NVM_VERSION="16" TARGET=TRUNK
    - os: linux
      env: NODE_NVM_VERSION="15" TARGET=STATIC
    - os: linux
      env: NODE_NVM_VERSION="15" TARGET=SHARED
    - os: linux
      env: NODE_NVM_VERSION="15" TARGET=TRUNK
    - os: linux
      env: NODE_NVM_VERSION="14" TARGET=STATIC
    - os: linux
      env: NODE_NVM_VERSION="14" TARGET=SHARED
    - os: linux
      env: NODE_NVM_VERSION="14" TARGET=TRUNK
    - os: linux
      env: NODE_NVM_VERSION="13" TARGET=STATIC
    - os: linux
      env: NODE_NVM_VERSION="13" TARGET=SHARED
    - os: linux
      env: NODE_NVM_VERSION="13" TARGET=TRUNK
    - os: linux
      env: NODE_NVM_VERSION="12" TARGET=STATIC
    - os: linux
      env: NODE_NVM_VERSION="12" TARGET=SHARED
    - os: linux
      env: NODE_NVM_VERSION="12" TARGET=TRUNK
    - os: linux
      env: NODE_NVM_VERSION="11" TARGET=STATIC
    - os: linux
      env: NODE_NVM_VERSION="11" TARGET=SHARED
    - os: linux
      env: NODE_NVM_VERSION="11" TARGET=TRUNK
    - os: linux
      env: NODE_NVM_VERSION="10" TARGET=STATIC
    - os: linux
      env: NODE_NVM_VERSION="10" TARGET=SHARED
    - os: linux
      env: NODE_NVM_VERSION="10" TARGET=TRUNK

  allow_failures:
    - env: NODE_NVM_VERSION="16" TARGET=TRUNK
    - env: NODE_NVM_VERSION="15" TARGET=TRUNK
    - env: NODE_NVM_VERSION="14" TARGET=TRUNK
    - env: NODE_NVM_VERSION="13" TARGET=TRUNK
    - env: NODE_NVM_VERSION="12" TARGET=TRUNK
    - env: NODE_NVM_VERSION="11" TARGET=TRUNK
    - env: NODE_NVM_VERSION="10" TARGET=TRUNK

before_install:
  - if [[ $TRAVIS_OS_NAME == "linux" ]]; then export CXX=g++-6 CXXFLAGS=-std=c++14 CC=gcc-6; fi
  - COMMIT_MESSAGE=$(git show -s --format=%B $TRAVIS_COMMIT | tr -d '\n')
  - PUBLISH_BINARY=false
  - if test "${COMMIT_MESSAGE#*'[publish binary]'}" != "$COMMIT_MESSAGE" && test "${TRAVIS_BRANCH}" == "master" && test "${TRAVIS_PULL_REQUEST}" == "false"; then PUBLISH_BINARY=true; fi;
  - REPUBLISH_BINARY=false
  - if test "${COMMIT_MESSAGE#*'[republish binary]'}" != "$COMMIT_MESSAGE" && test "${TRAVIS_BRANCH}" == "master" && test "${TRAVIS_PULL_REQUEST}" == "false"; then REPUBLISH_BINARY=true; fi;
  - git clone https://github.com/creationix/nvm.git ../.nvm && source ../.nvm/nvm.sh
  - nvm install $NODE_NVM_VERSION
  - nvm use $NODE_NVM_VERSION
  - node --version
  - npm --version
  - $CXX --version
  - NPM_CACHE=$(npm config get cache)
  - echo $NPM_CACHE
  - if [ -d $NPM_CACHE ]; then sudo chown -R $USER $NPM_CACHE; fi;

install:
  - if [[ "${TARGET}" == "TRUNK" ]]; then ./scripts/gdal-trunk.sh; fi;
  - if [[ "${TARGET}" == "SHARED" && "$(uname -s)" == "Linux" ]]; then sudo apt-get -qq update; sudo apt-get --force-yes -qq install libgdal-dev libc6-dev; fi;
  - if [[ "${TARGET}" == "SHARED" || "${TARGET}" == "TRUNK" ]]; then npm install --build-from-source --shared_gdal; fi;
  - if [[ "${TARGET}" == "SHARED" || "${TARGET}" == "TRUNK" ]]; then gdal-config --version --version; fi;
  - if [[ "${TARGET}" == "STATIC" ]]; then npm install --build-from-source > /dev/null; fi;
  - npm test

script:
  - ./node_modules/.bin/node-pre-gyp package testpackage
  - npm test
  - if [[ "${TARGET}" == "STATIC" && "${PUBLISH_BINARY}" == "true" ]]; then ./node_modules/.bin/node-pre-gyp publish; rm -rf {build,lib/binding}; ./node_modules/.bin/node-pre-gyp install --fallback-to-build=false; npm test; fi
  - if [[ "${TARGET}" == "STATIC" && "${REPUBLISH_BINARY}" == "true" ]]; then ./node_modules/.bin/node-pre-gyp unpublish publish; rm -rf {build,lib/binding}; ./node_modules/.bin/node-pre-gyp install --fallback-to-build=false; npm test; fi
